services:
  # 共享服务
  redis:
    image: redis:7-alpine
    container_name: ntn-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
    command: redis-server --requirepass ${REDIS_PASSWORD:-ntn_redis_2024}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组01: API统一管理工厂
  api_forge:
    build:
      context: ./01APIForge
      dockerfile: Dockerfile
    container_name: ntn-api-forge
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
      - ZMQ_PUBLISHER_PORT=5555
      - ZMQ_SUBSCRIBER_PORT=5556
    ports:
      - "8000:8000"
      - "5555:5555"
      - "5556:5556"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./01APIForge/data:/app/data
      - ./01APIForge/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组02: 信息源爬虫
  data_spider:
    build:
      context: ./02DataSpider
      dockerfile: Dockerfile
      target: production
    container_name: ntn-data-spider
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - NTN_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
      - ZMQ_PUBLISHER_PORT=5555
      - ZMQ_SUBSCRIBER_PORT=5556
    ports:
      - "5000:5000"
      - "5557:5555"
      - "5558:5556"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./02DataSpider/data:/app/data
      - ./02DataSpider/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组03: 扫描器
  scan_pulse:
    build:
      context: ./03ScanPulse
      dockerfile: Dockerfile
      target: runtime
    dns:
      - 8.8.8.8
      - 1.1.1.1
    container_name: ntn-scan-pulse
    restart: unless-stopped
    environment:
      - SCANNER_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
    ports:
      - "5559:5555"
      - "5560:5556"
      - "5561:5557"
      - "5562:5558"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./03ScanPulse/logs:/app/logs
      - ./03ScanPulse/config:/app/config
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('/app'); from scanner.health_check import check_health; exit(0 if check_health() else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # 模组04: 策略优化核心
  opti_core:
    build:
      context: ./04OptiCore
      dockerfile: Dockerfile
      target: production
    container_name: ntn-opti-core
    restart: unless-stopped
    environment:
      - NTN_ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
      - DATABASE_PATH=/app/data/opticore.db
      - ZMQ_SUBSCRIBER_PORT=5555
      - ZMQ_PUBLISHER_PORT=5556
    ports:
      - "8002:8000"
      - "5563:5555"
      - "5564:5556"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./04OptiCore/data:/app/data
      - ./04OptiCore/logs:/app/logs
      - ./04OptiCore/cache:/app/cache
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # 模组05-07: 交易防护系统
  trade_guard:
    build:
      context: ./05-07TradeGuard
      dockerfile: Dockerfile
    container_name: ntn-trade-guard
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
    ports:
      - "3000:3001"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./05-07TradeGuard/data:/app/data
      - ./05-07TradeGuard/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组08: 神经网络中枢
  neuro_hub:
    build:
      context: ./08NeuroHub
      dockerfile: Dockerfile
    dns:
      - 8.8.8.8
      - 1.1.1.1
    container_name: ntn-neuro-hub
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
      - ZMQ_PUBLISHER_PORT=5555
      - ZMQ_SUBSCRIBER_PORT=5556
    ports:
      - "8003:8000"
      - "5565:5555"
      - "5566:5556"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./08NeuroHub/data:/app/data
      - ./08NeuroHub/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组09: 多市场管理系统
  mms:
    build:
      context: ./09MMS
      dockerfile: Dockerfile
    container_name: ntn-mms
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
      - ZMQ_PUBLISHER_PORT=5555
      - ZMQ_SUBSCRIBER_PORT=5556
      - ZMQ_CONTROL_PORT=5557
    ports:
      - "8004:8000"
      - "5567:5555"
      - "5568:5556"
      - "5569:5557"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./09MMS/data:/app/data
      - ./09MMS/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组10: 人工审核后端
  review_guard:
    build:
      context: ./10ReviewGuard
      dockerfile: Dockerfile
    container_name: ntn-review-guard
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
      - ZMQ_PUBLISHER_PORT=5556
      - ZMQ_SUBSCRIBER_PORT=5555
    ports:
      - "8005:8000"
      - "5570:5555"
      - "5571:5556"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./10ReviewGuard/data:/app/data
      - ./10ReviewGuard/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组10: 人工审核前端
  review_guard_frontend:
    build:
      context: ./10ReviewGuard/frontend
      dockerfile: Dockerfile
    container_name: ntn-review-guard-frontend
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 1.1.1.1
    ports:
      - "3001:3000"
    networks:
      - ntn_network
    depends_on:
      review_guard:
        condition: service_healthy

  # 模组11: 自动化策略交易系统控制台
  asts_console:
    build:
      context: ./11ASTS Console
      dockerfile: Dockerfile
    container_name: ntn-asts-console
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    ports:
      - "80:80"
    volumes:
      - ./11ASTS Console/logs:/var/log/nginx
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组12: 交易算法核心服务
  ta_core_service:
    build:
      context: ./12TACoreService
      dockerfile: Dockerfile
    dns:
      - 8.8.8.8
      - 1.1.1.1
    container_name: ntn-ta-core-service
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
      - ZMQ_PUBLISHER_PORT=5555
    ports:
      - "8006:8000"
      - "5572:5555"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./12TACoreService/data:/app/data
      - ./12TACoreService/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 模组13: AI策略助手
  ai_strategy_assistant:
    build:
      context: ./13AI Strategy Assistant
      dockerfile: Dockerfile
    dns:
      - 8.8.8.8
      - 1.1.1.1
    container_name: ntn-ai-strategy-assistant
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - PORT=8000
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
    ports:
      - "8007:8000"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./13AI Strategy Assistant/data:/app/data
      - ./13AI Strategy Assistant/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s

  # 模组14: 可观测性中心
  observability_center:
    build:
      context: ./14Observability Center
      dockerfile: Dockerfile
    container_name: ntn-observability-center
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ntn_redis_2024}
    ports:
      - "3002:3000"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./14Observability Center/data:/app/data
      - ./14Observability Center/logs:/app/logs
    networks:
      - ntn_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  ntn_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local